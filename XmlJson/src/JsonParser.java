/* JsonParser.java */
/* Generated By:JavaCC: Do not edit this line. JsonParser.java */
//package parseurjava;  // Ajout de la déclaration du package

import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;

public class JsonParser implements JsonParserConstants {
 
	
	
	public static String jsonToXml(Map<String, Object> jsonObject) {
	    return jsonToXml(jsonObject, 0); // Ajoute un niveau initial d'indentation
	}

	private static String jsonToXml(Map<String, Object> jsonObject, int indent) {
	    StringBuilder xml = new StringBuilder();
	    String indentation = "  ".repeat(indent); // Deux espaces pour chaque niveau d'indentation

	    xml.append(indentation).append("<root>\n");
	    for (Map.Entry<String, Object> entry : jsonObject.entrySet()) {
	        xml.append(indentation).append("  ").append("<").append(entry.getKey()).append(">");

	        if (entry.getValue() instanceof Map) {
	            // Appel récursif pour les objets imbriqués
	            xml.append("\n").append(jsonToXml((Map<String, Object>) entry.getValue(), indent + 1))
	               .append(indentation).append("  ");
	        } else if (entry.getValue() instanceof List) {
	            // Conversion des tableaux en XML
	            xml.append("\n");
	            for (Object item : (List<Object>) entry.getValue()) {
	                xml.append(indentation).append("    ")
	                   .append("<item>").append(item).append("</item>\n");
	            }
	            xml.append(indentation).append("  ");
	        } else {
	            // Valeur simple
	            xml.append(entry.getValue());
	        }

	        xml.append("</").append(entry.getKey()).append(">\n");
	    }
	    xml.append(indentation).append("</root>\n");

	    return xml.toString();
	}
  final public void JSON() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LBRACE:{
      OBJECT();
      break;
      }
    case LBRACKET:{
      ARRAY();
      break;
      }
    default:
      jj_la1[0] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  final public Map<String, Object> OBJECT() throws ParseException {Map<String, Object> map = new LinkedHashMap<>();
    String key;
    Object value;
    jj_consume_token(LBRACE);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case STRING:{
      key = STRING();
      jj_consume_token(COLON);
      value = VALUE();
map.put(key, value);
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COMMA:{
          ;
          break;
          }
        default:
          jj_la1[1] = jj_gen;
          break label_1;
        }
        jj_consume_token(COMMA);
        key = STRING();
        jj_consume_token(COLON);
        value = VALUE();
map.put(key, value);
      }
      break;
      }
    default:
      jj_la1[2] = jj_gen;
      ;
    }
    jj_consume_token(RBRACE);
{if ("" != null) return map;}
    throw new Error("Missing return statement in function");
}

  final public void PAIR() throws ParseException {
    STRING();
    jj_consume_token(COLON);
    VALUE();
}

  final public List<Object> ARRAY() throws ParseException {List<Object> list = new ArrayList<>();
    Object value;
    jj_consume_token(LBRACKET);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LBRACE:
    case LBRACKET:
    case TRUE:
    case FALSE:
    case NULL:
    case NUMBER:
    case STRING:{
      value = VALUE();
list.add(value);
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COMMA:{
          ;
          break;
          }
        default:
          jj_la1[3] = jj_gen;
          break label_2;
        }
        jj_consume_token(COMMA);
        value = VALUE();
list.add(value);
      }
      break;
      }
    default:
      jj_la1[4] = jj_gen;
      ;
    }
    jj_consume_token(RBRACKET);
{if ("" != null) return list;}
    throw new Error("Missing return statement in function");
}

  final public Object VALUE() throws ParseException {Object value;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case STRING:{
      value = STRING();
{if ("" != null) return value;}
      break;
      }
    case NUMBER:{
      value = NUMBER();
{if ("" != null) return value;}
      break;
      }
    case LBRACE:{
      value = OBJECT();
{if ("" != null) return value;}
      break;
      }
    case LBRACKET:{
      value = ARRAY();
{if ("" != null) return value;}
      break;
      }
    case TRUE:{
      jj_consume_token(TRUE);
{if ("" != null) return true;}
      break;
      }
    case FALSE:{
      jj_consume_token(FALSE);
{if ("" != null) return false;}
      break;
      }
    case NULL:{
      jj_consume_token(NULL);
{if ("" != null) return null;}
      break;
      }
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

  final public String STRING() throws ParseException {
    jj_consume_token(STRING);
{if ("" != null) return token.image.substring(1, token.image.length() - 1);}
    throw new Error("Missing return statement in function");
}

  final public double NUMBER() throws ParseException {
    jj_consume_token(NUMBER);
{if ("" != null) return Double.parseDouble(token.image);}
    throw new Error("Missing return statement in function");
}

  /** Generated Token Manager. */
  public JsonParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[6];
  static private int[] jj_la1_0;
  static {
	   jj_la1_init_0();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {0x14,0x80,0x4000,0x80,0x6714,0x6714,};
	}

  /** Constructor with InputStream. */
  public JsonParser(java.io.InputStream stream) {
	  this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public JsonParser(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source = new JsonParserTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
	  ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public JsonParser(java.io.Reader stream) {
	 jj_input_stream = new SimpleCharStream(stream, 1, 1);
	 token_source = new JsonParserTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
	   jj_input_stream = new SimpleCharStream(stream, 1, 1);
	} else {
	   jj_input_stream.ReInit(stream, 1, 1);
	}
	if (token_source == null) {
 token_source = new JsonParserTokenManager(jj_input_stream);
	}

	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public JsonParser(JsonParserTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(JsonParserTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
	 Token oldToken;
	 if ((oldToken = token).next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 if (token.kind == kind) {
	   jj_gen++;
	   return token;
	 }
	 token = oldToken;
	 jj_kind = kind;
	 throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
	 if (token.next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 jj_gen++;
	 return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
	 Token t = token;
	 for (int i = 0; i < index; i++) {
	   if (t.next != null) t = t.next;
	   else t = t.next = token_source.getNextToken();
	 }
	 return t;
  }

  private int jj_ntk_f() {
	 if ((jj_nt=token.next) == null)
	   return (jj_ntk = (token.next=token_source.getNextToken()).kind);
	 else
	   return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
	 jj_expentries.clear();
	 boolean[] la1tokens = new boolean[15];
	 if (jj_kind >= 0) {
	   la1tokens[jj_kind] = true;
	   jj_kind = -1;
	 }
	 for (int i = 0; i < 6; i++) {
	   if (jj_la1[i] == jj_gen) {
		 for (int j = 0; j < 32; j++) {
		   if ((jj_la1_0[i] & (1<<j)) != 0) {
			 la1tokens[j] = true;
		   }
		 }
	   }
	 }
	 for (int i = 0; i < 15; i++) {
	   if (la1tokens[i]) {
		 jj_expentry = new int[1];
		 jj_expentry[0] = i;
		 jj_expentries.add(jj_expentry);
	   }
	 }
	 int[][] exptokseq = new int[jj_expentries.size()][];
	 for (int i = 0; i < jj_expentries.size(); i++) {
	   exptokseq[i] = jj_expentries.get(i);
	 }
	 return new ParseException(token, exptokseq, tokenImage);
  }

  private boolean trace_enabled;

/** Trace enabled. */
  final public boolean trace_enabled() {
	 return trace_enabled;
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
